
import React, { useEffect, useState } from 'react';
import { MainLayout } from '@/components/layout/MainLayout';
import { useParams, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { ArrowLeft, Download, Copy, FileText } from 'lucide-react';
import { Separator } from '@/components/ui/separator';
import { SummaryResult } from '@/services/transcription';

const NotesView = () => {
  const { id } = useParams<{ id: string }>();
  const navigate = useNavigate();
  const [summary, setSummary] = useState<SummaryResult | null>(null);
  
  useEffect(() => {
    // In a real app, we would fetch the note from Supabase
    // For now, we're using localStorage as a demo
    const savedSummary = localStorage.getItem('lastSummary');
    if (savedSummary) {
      setSummary(JSON.parse(savedSummary));
    }
  }, [id]);
  
  const handleCopyToClipboard = () => {
    if (!summary) return;
    
    const textContent = `
      ${summary.structuredSummary.summary}
      
      Key Points:
      ${summary.structuredSummary.keyPoints.map(point => `- ${point}`).join('\n')}
      
      ${summary.structuredSummary.sections.map(section => `
        ${section.title}
        ${section.content}
        
        ${section.subsections.map(subsection => `
          ${subsection.title}
          ${subsection.content}
        `).join('\n')}
      `).join('\n')}
    `;
    
    navigator.clipboard.writeText(textContent.trim());
    
    // Notify user
    const toast = document.createElement('div');
    toast.textContent = 'Copied to clipboard';
    toast.style.position = 'fixed';
    toast.style.bottom = '20px';
    toast.style.right = '20px';
    toast.style.padding = '10px 20px';
    toast.style.backgroundColor = '#4CAF50';
    toast.style.color = 'white';
    toast.style.borderRadius = '4px';
    toast.style.zIndex = '1000';
    document.body.appendChild(toast);
    
    setTimeout(() => {
      document.body.removeChild(toast);
    }, 3000);
  };
  
  if (!summary) {
    return (
      <MainLayout>
        <div className="max-w-4xl mx-auto">
          <div className="flex items-center justify-between mb-6">
            <Button 
              variant="ghost" 
              className="gap-2"
              onClick={() => navigate('/')}
            >
              <ArrowLeft className="h-4 w-4" />
              Back to Notes
            </Button>
          </div>
          
          <div className="bg-card rounded-lg border border-border/50 shadow-sm p-6 text-center">
            <p className="text-muted-foreground">Note not found or still processing.</p>
            <Button 
              variant="outline"
              className="mt-4"
              onClick={() => navigate('/')}
            >
              Return Home
            </Button>
          </div>
        </div>
      </MainLayout>
    );
  }
  
  return (
    <MainLayout>
      <div className="max-w-4xl mx-auto">
        <div className="flex items-center justify-between mb-6">
          <Button 
            variant="ghost" 
            className="gap-2"
            onClick={() => navigate('/')}
          >
            <ArrowLeft className="h-4 w-4" />
            Back to Notes
          </Button>
          
          <div className="flex gap-2">
            <Button variant="outline" className="gap-2" onClick={handleCopyToClipboard}>
              <Copy className="h-4 w-4" />
              Copy
            </Button>
            <Button variant="outline" className="gap-2">
              <FileText className="h-4 w-4" />
              Export as Text
            </Button>
            <Button variant="outline" className="gap-2">
              <FileText className="h-4 w-4" />
              Export as PDF
            </Button>
          </div>
        </div>
        
        <div className="bg-card rounded-lg border border-border/50 shadow-sm overflow-hidden">
          <div className="p-6 bg-muted/30">
            <h1 className="text-2xl font-semibold">Lecture Notes - {new Date().toLocaleDateString()}</h1>
            <p className="text-sm text-muted-foreground mt-1">
              Generated by AI on {new Date().toLocaleString()}
            </p>
          </div>
          
          <div className="p-6">
            <div className="prose prose-sm max-w-none">
              <h2 className="text-xl font-medium mb-2">Summary</h2>
              <p className="mb-6">{summary.structuredSummary.summary}</p>
              
              <h2 className="text-xl font-medium mb-2">Key Points</h2>
              <ul className="mb-6">
                {summary.structuredSummary.keyPoints.map((point, index) => (
                  <li key={index} className="mb-1">{point}</li>
                ))}
              </ul>
              
              <Separator className="my-6" />
              
              {summary.structuredSummary.sections.map((section, index) => (
                <div key={index} className="mb-6">
                  <h2 className="text-xl font-medium mb-2">{section.title}</h2>
                  <p className="mb-4">{section.content}</p>
                  
                  {section.subsections.map((subsection, subIndex) => (
                    <div key={subIndex} className="mb-4 ml-4">
                      <h3 className="text-lg font-medium mb-1">{subsection.title}</h3>
                      <p>{subsection.content}</p>
                    </div>
                  ))}
                </div>
              ))}
            </div>
          </div>
        </div>
      </div>
    </MainLayout>
  );
};

export default NotesView;
